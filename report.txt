 完成させた項目
中置記法の入力式をトークンに分割する機能

数値、演算子、括弧を識別し、配列に格納。

スタックとキューを用いた逆ポーランド記法への変換

演算子の優先度（例：^ > * > +）と右結合性（^のみ）を考慮。

括弧を含む複雑な式の処理

ネストした括弧を正しく展開し、優先順位を反映。






プログラムの説明

1. 主要ファイルと関数の役割
各ファイルが実装する機能と関数の詳細を以下に説明します。

lib1.h と lib1.c：入力処理と文字列判定
read関数

機能：標準入力から数式を読み込み、トークン（数値、演算子、括弧）に分割。

処理フロー：

空白文字をスキップ。

数値（例：12.3）または演算子（例：+）を検出し、バッファに格納。

入力終了（qまたはQ）を検出するとプログラム終了。

エラーチェック：不正な文字（未定義の記号）や小数点の重複を検出するとエラー終了。

isNumberStr と isDoubleStr

機能：文字列が数値（例："123"）または符号付き数値（例："-5.6"）か判定。

内部ロジック：

isNumberStr：文字列が数字と小数点（最大1個）のみで構成されるかチェック。

isDoubleStr：先頭に+/-が付いた場合、残りの文字列をisNumberStrで判定。

isOpStr

機能：文字列が演算子（+, -, *, /, %, ^）か判定。

判定方法：文字列長が1であり、定義された演算子リストに含まれるかチェック。

toStr関数

機能：double型の値を文字列に変換。

メモリ管理：内部で静的バッファを使用し、変換結果を保存。バッファ不足時はエラー終了。

stack.h と stack.c：スタックの管理
データ構造：固定サイズ配列（MAX_SIZE=200）とスタックトップインデックス（top）。

initStack

機能：スタックを初期化（top = -1）。

push

機能：文字列をスタックに追加。

内部処理：strdupで文字列を複製し、メモリ安全性を確保。スタックが満杯の場合、エラー終了。

pop

機能：スタックトップの文字列を返し、トップを下降。

注意点：strdupで確保したメモリは解放されないため、潜在的なメモリリークあり。

peek

機能：スタックトップの文字列を参照（削除しない）。

isEmpty

機能：スタックが空か判定（top == -1）。

printStack

機能：スタックの全要素を表示（デバッグ用）。

queue.h と queue.c：キューの管理
データ構造：循環配列（QUEUE_SIZE=200）とインデックス（front, count）。

initQueue

機能：キューを初期化（front = count = 0）。

enqueue

機能：文字列をキューの末尾に追加。

内部処理：rear = (front + count) % QUEUE_SIZEで位置計算。

dequeue

機能：キューの先頭から文字列を取り出し。

内部処理：frontを更新し、countを減少。

isQueueEmpty と isQueueFull

機能：キューが空または満杯か判定。

printQueue

機能：キューの全要素を表示（デバッグ用）。

main.c：変換アルゴリズムの実装
getPriority関数

機能：演算子の優先度を数値化（^=3, *//=2, +/-=1）。

判定ロジック：strcmpで演算子を比較。

isRightAssociative関数

機能：演算子が右結合（^のみ）か判定。

infixToRPN関数

処理フロー：

入力トークンを順次処理。

数値：直接キューに追加。

左括弧 (：スタックにプッシュ。

右括弧 )：( が見つかるまでスタックからポップしキューに移動。

演算子：スタックトップの演算子と優先度を比較し、適切な位置に配置。

最終処理：スタックに残った演算子を全てキューに移動。

2. プログラムの実行原理
入力フェーズ：

read関数がinput>プロンプトを表示し、ユーザーから式（例：(3 + 4) * 2）を受け取る。

式をトークン配列（例：["(", "3", "+", "4", ")", "*", "2"]）に分割。

変換フェーズ：

トークンを順次処理し、以下のロジックを適用：

数値トークン：キューに直接追加（例：3, 4, 2）。

左括弧 (：スタックにプッシュ。

右括弧 )：スタックから( までポップしキューに移動。

演算子 +：スタックトップの演算子より優先度が低いため、スタックにプッシュ。

演算子 *：スタックトップの+より優先度が高いため、そのままプッシュ。

出力フェーズ：

キューに格納された逆ポーランド式（例：3 4 + 2 *）を順次表示。

3.各ファイル間の関連性の詳細解説
（1）. 入力処理モジュール (lib1.h / lib1.c)
関連性：

main.cとの連携：

main.cはlib1.hのread関数を呼び出し、ユーザー入力からトークン（数値、演算子、括弧）を取得します。

取得したトークンは、infixToRPN関数に渡され、変換処理の基盤となります。

内部関数の役割：

isNumberStr、isDoubleStr、isOpStrは、read関数内でトークンの種類を判別し、不正な入力（例：複数小数点）を検出します。

toStr関数はdouble型の値を文字列に変換し、デバッグや拡張機能での利用が想定されます。

（2）. スタックモジュール (stack.h / stack.c)
関連性：

main.cとの連携：

中置記法の変換中、演算子や括弧の一時保存に使用されます。

infixToRPN関数内でpush（演算子をスタックに追加）、pop（スタックから取り出し）、peek（スタックトップの確認）が頻繁に呼び出されます。

内部実装の特徴：

固定サイズ配列（MAX_SIZE=200）で実装され、スタックオーバーフロー時にはエラー終了します。

strdupで文字列を複製するため、メモリ管理に注意が必要です（例：pop時にfreeしないとメモリリークが発生）。

（3）. キューモジュール (queue.h / queue.c)
関連性：

main.cとの連携：

逆ポーランド記法に変換されたトークンを順次格納します。

enqueueでトークンを追加し、最終的にdequeueで全てのトークンを出力します。

内部実装の特徴：

循環配列（QUEUE_SIZE=200）を使用し、メモリ効率を最適化しています。

frontとcountでキューの先頭位置と要素数を管理し、オーバーフロー・アンダーフローを検出します。

（4）. メイン処理モジュール (main.c)
関連性：

全体の制御：

main関数はreadで入力を受け取り、infixToRPNで変換処理を実行します。

getPriority（演算子の優先度判定）とisRightAssociative（右結合性の判定）が変換ロジックの中核を担います。

変換アルゴリズムの流れ：

数値トークン：直接キューに追加。

左括弧 (：スタックにプッシュ。

右括弧 )：( が見つかるまでスタックからポップしキューに移動。

演算子：スタックトップの演算子と優先度を比較し、適切な位置に配置。

最終処理：スタックに残った演算子を全てキューに移動。

（5）. ファイル間の依存関係
ヘッダファイルの包含関係：

main.cはlib1.h、stack.h、queue.hをインクルードし、各モジュールの関数を利用します。

stack.cとqueue.cはそれぞれ自身のヘッダファイルをインクルードし、関数の宣言と実装を整合させます。

データの流れ：

入力 → lib1.c → トークン配列 → main.c。

トークン配列 → main.cの変換処理 → スタックとキューを操作。

変換結果 → キュー → 出力。

総括
各ファイルは以下の役割を分担し、密接に連携しています：

lib1：入力の読み取りとトークン分割。

stack：演算子と括弧の一時管理。

queue：逆ポーランド記法の結果格納。

main：全体の制御と変換ロジックの実行。

これらが組み合わさることで、中置記法から逆ポーランド記法への効率的な変換が実現されています。一方で、メモリ管理やエラー処理の改善余地があり、実用性を高めるための拡張が期待されます。

 動作確認

input> 5 + 2 - 1
5 2 + 1 -

input> 10 + 5 - 3 - 2 + 1
10 5 + 3 - 2 - 1 +

input> 9 + 8 * 5 / 2 * 4 - 3 * 7
9 8 5 * 2 / 4 * + 3 7 * -

input> 3 + 1 - 4 + 1 + 5 * 9 * 2 / 6 * 5 / 3 - 5

input> 3 + 1 - 4 + 1 + 5 * 9 * 2 / 6 * 5 / 3 - 5
3 1 + 4 - 1 + 5 9 * 2 * 6 / 5 * 3 / + 5 -

input> 10 + 20 * ( 30 - 40 + 50 ) - ( 60 + 70 )
10 20 30 40 - 50 + * + 60 70 + -

input> ( ( 1 + 2 ) * 3 + 4 ) * 5
1 2 + 3 * 4 + 5 *

input> 1+(5*(8+2)-1*(1+(9+2)*1)+(1-8))-5
1 5 8 2 + * 1 1 9 2 + 1 * + * - 1 8 - + + 5 -




考察と工夫点の詳細説明

1. アルゴリズムの選択理由Shunting-yardアルゴリズムの採用
狙い：

中置記法から逆ポーランド記法への変換を、直感的かつ効率的に実現するため。

スタックとキューのみで処理可能なため、実装がシンプルで教育目的に適している。

利点：

計算量の最適化：時間計算量が O(n)（nはトークン数）で、大規模な式にも対応可能。

括弧のネスト処理：スタックを用いて括弧の優先順位を自然に反映できる。

右結合性の特別処理
問題点：

べき乗演算子（^）は右結合（例：2^3^2 = 2^(3^2)）であり、通常の左結合演算子（+, *）とは挙動が異なる。

解決策：

isRightAssociative関数で^を識別し、優先度が同じ場合にスタックへのプッシュを遅延させる。

例：2^3^2 → 2 3 2 ^ ^（右結合を正しく反映）。

2. データ構造の設計
スタックとキューの活用
スタックの役割：

演算子と括弧を一時保存し、優先度に基づいて順序を制御。

例：+がスタックにある状態で*が来た場合、*を優先的にスタックに追加。

キューの役割：

逆ポーランド記法の結果を順次蓄積し、最終的な出力を整理。

例：数値3と4をキューに追加後、+を追加して3 4 +を形成。

循環配列によるキューの実装
工夫点：

メモリ効率を向上させるため、固定サイズの配列（QUEUE_SIZE=200）を循環的に使用。

frontとcountでキューの先頭位置と要素数を管理し、オーバーフローを防止。

利点：

配列の再利用により、メモリ消費を最小限に抑える。

3. メモリ管理の工夫
strdupによる文字列の複製
問題背景：

入力トークン（例："123"）は一時的なバッファに格納されるため、直接参照すると寿命管理が困難。

解決策：

push関数内でstrdupを使用し、文字列をヒープメモリに複製。

例：push("+") → strdup("+")で独立したメモリ領域を確保。

課題：

pop時にfreeを呼び出さないため、メモリリークが発生（改善案：freeの追加）。

静的バッファの利用
toStr関数の設計：

double値を文字列に変換する際、静的配列（static char Buf[...]）を再利用。

利点：メモリ割り当てのオーバーヘッドを回避。

欠点：大規模な呼び出しでバッファ不足が発生する可能性あり。

4. エラーハンドリング
不正入力の検出
実装例：

read関数内で未定義の文字（例：&）を検出した場合、即時エラー終了。

if (isSymbolChar(str[i])) { ... }  
else {  
    printf("Error: 未知の文字 '%c' を検出\n", str[i]);  
    exit(1);  
}
課題：

エラー発生時に再入力を促す機能が不足（改善案：ループ処理の追加）。

スタック/キューのオーバーフロー対策
固定サイズの制約：

MAX_SIZE=200の制限により、長い式や多数のトークンに対応不可。

改善案：

動的配列またはリンクリストでデータ構造を再設計。

5. 拡張性への配慮
演算子の優先度定義の柔軟性
実装例：

getPriority関数で演算子ごとに優先度を数値化。

新しい演算子（例：@）を追加する場合、関数の修正のみで対応可能。

int getPriority(char* op) {  
    if (strcmp(op, "@") == 0) return 4; // 新しい優先度を追加  
    ...  
}
右結合性の拡張
実装例：

isRightAssociative関数を修正し、新しい演算子（例：$）を右結合として定義可能。


int isRightAssociative(char* op) {  
    return strcmp(op, "^") == 0 || strcmp(op, "$") == 0;  
}
6. その他の工夫点
デバッグ支援機能
printStackとprintQueue関数：

スタックとキューの内容を途中表示し、変換プロセスを可視化。

例：デバッグ時にprintStack()を呼び出し、スタック状態を確認。

境界値テストの実施
テストケースの設計：

括弧のネスト（例：((1+2)*3)）や、演算子の連続（例：1+2+3）を網羅。

例：2^3^2のテストで右結合性が正しく反映されることを確認。





